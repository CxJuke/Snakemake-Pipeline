rule all:
	input:
		'result/out.vcf'

rule bwa_index:
	input:
		'data/reference.fa'
	output:
		touch('temp/bwa_index.done')
	shell:
		"bwa index {input}"

rule bwa_allign:
	input:
		check = 'temp/bwa_index.done',
		gen = 'data/reference.fa',
		reads = 'data/reads.txt'
	output:
		'temp/out.sai'
	shell:
		'bwa aln -I -t 8 {input.gen} {input.reads} > {output}'

rule bwa_samse:
	input:
		allign = 'temp/out.sai',
		reads = 'data/reads.txt',
		gen = 'data/reference.fa'
	output:
		'alligned/out.sam'
	message:
		'Alligning inputs'
	shell:
		'bwa samse {input.gen} {input.allign} {input.reads} > {output}'

rule samtools_view:
	input:
		'alligned/out.sam'
	output:
		'temp/out.bam'
	message:
		'Converting {input} to bam file'
	shell:
		'samtools view -S -b {input} > {output}'

rule samtools_sort:
	input:
		'temp/out.bam'
	output:
		'sorted/out.sorted.bam'
	message:
		'sorting view...'
	shell:
		'samtools sort {input} -o {output}'

rule remove_duplicates:
	input:
		'sorted/out.sorted.bam'
	output:
		metrics = 'out.metrics',
		filtered = 'filtered/out.dedupe.bam'
	message:
		'Removing duplicates...'
	shell:
		"""
		java -jar picard/build/libs/picard.jar  
		 MarkDuplicates \ 
		MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000\ 
		METRICS_FILE={output.metrics} \ 
		REMOVE_DUPLICATES=true \ 
		ASSUME_SORTED=true \ 
		VALIDATION_STRINGENCY=LENIENT \ 
		INPUT={input} \ 
		OUTPUT={output.filtered}
		"""

rule samtools_index:
	input:
		'filtered/out.dedupe.bam'
	output:
		touch('temp/samt_index.done')
	message:
		'indexing...'
	shell:
		'samtools index {input}'

rule samtools_mpileup:
	input:
		check = 'temp/samt_index.done',
		reference = 'data/reference.fa'	,
		deduped = 'filtered/out.dedupe.bam'
	output:
		'result/out.vcf'
	message:
		'Creating pileup and converting to bcf file...'
	shell:
		'samtools mpileup -uf {input.reference} {input.deduped} | '
		'bcftools view > {output}'
