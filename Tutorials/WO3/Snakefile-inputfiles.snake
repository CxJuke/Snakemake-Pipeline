# -*- python -*-
from os.path import join

WORKDIR = "/homes/jprofijt/snakemake/snakemake-pipeline/WO3/datapaths/"
DATA_DIR = "/commons/Themas/Thema11/Dataprocessing/data/"

rule all:
    input:
        join(WORKDIR, 'out.html')


rule bwa_map:
    input:
        join(DATA_DIR, 'genome.fa') ,
        join(DATA_DIR, 'samples/{sample}.fastq') 
    output:
        join(WORKDIR, 'mapped_reads/{sample}.bam')
    message: "executing bwa mem on the following {input} to generate the following {output}"
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"

rule samtools_sort:
    input:
        join(WORKDIR, 'mapped_reads/{sample}.bam')
    output:
        join(WORKDIR, 'sorted_reads/{sample}.bam')
    message: "Sorting reads"
    shell:
        "samtools sort -T {WORKDIR}sorted_reads/{wildcards.sample} -O bam {input} > {output}"

rule samtools_index:
    input:
        join(WORKDIR, 'sorted_reads/{sample}.bam')
    output:
        join(WORKDIR, 'sorted_reads/{sample}.bam.bai')
    message: "Indexing reads"
    shell:
        "samtools index {input}"


rule bcftools_call:
    input:
        fa=join(DATA_DIR, 'genome.fa'),
        bam=expand("{wdir}sorted_reads/{sample}.bam", wdir=WORKDIR, sample=SAMPLES),
        bai=expand("{wdir}sorted_reads/{sample}.bam.bai", wdir=WORKDIR, sample=SAMPLES)
    output:
        join(WORKDIR, 'calls/all.vcf')
    message: "called bcftools"
    shell:
        "samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"

rule report:
    input:
        join(WORKDIR, 'calls/all.vcf')
    output:
        join(WORKDIR, 'out.html')
    run:
        from snakemake.utils import report
        with open(input[0]) as f:
            n_calls = sum(1 for line in f if not line.startswith("#"))

        report("""
        An example workflow
        ===================================

        Reads were mapped to the Yeas reference genome 
        and variants were called jointly with
        SAMtools/BCFtools.

        This resulted in {n_calls} variants (see Table T1_).
        """, output[0], metadata="Author: Mr Pipeline", T1=input[0])
